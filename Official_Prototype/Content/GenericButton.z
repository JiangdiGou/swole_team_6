/*
Script Author: Nolan T Yoo
All content © 2015 DigiPen (USA) Corporation, all rights reserved.

Comment: Button that can be configured to do basically anything at the cost of memory.
*/


enum ButtonType {LoadLevel, QuitGame, Unpause, ReturnableLevel, DoNothing,
 

FullQuit, LevelBreak, BreakAndFunc}

class GenericButton : ZilchComponent
{
    
    [Dependency]
    var Sprite: Sprite;
    [Property]
    var ButtonType: ButtonType;
    [Property]
    var LoadThisLevel: Level = null;
    
    var FunctionCall : delegate();
    var SoundSpace : Space = null;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.MouseDown, this.OnMouseDown);
        Zero.Connect(this.Owner, Events.MouseUp, this.OnMouseUp);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        if(this.SoundSpace == null)
        {
            this.SoundSpace = this.GameSession.FindSpaceByName("SoundSpace");
        }
    }
    
    function PlayCue(cue : SoundCue)
    {
        this.SoundSpace.FindObjectByName("SFX").SoundEmitter.PlayCue(cue);
    }

    function OnMouseUp(event : ViewportMouseEvent)
    {
        if(this.ButtonType == ButtonType.LoadLevel)
        {
            this.Space.LoadLevel(this.LoadThisLevel);
        }
        if(this.ButtonType == ButtonType.QuitGame)
        {
            if(this.Owner.Space.LevelSettings.LevelListener.Pausable)
            {
                this.Owner.Space.TimeSpace.TogglePause();
            }
            this.Owner.Space.LevelSettings.LevelListener.IgnoreKey = true;
            this.Owner.Space.LevelSettings.LevelListener.IsThePauseLevel = false;
            var breakSpace = this.GameSession.CreateNamedSpace("ReturnableSpace", Archetype.Find("Space"));
            breakSpace.LoadLevel(this.LoadThisLevel);
            breakSpace.LevelSettings.LayeredPause.Unlayer = this.Owner.Space;
        }
        if(this.ButtonType == ButtonType.FullQuit)
        {
            this.GameSession.RequestQuit();
        }
        if(this.ButtonType == ButtonType.LevelBreak)
        {
            this.Owner.Space.LevelSettings.LayeredPause.BreakMe();
        }
        if(this.ButtonType == ButtonType.BreakAndFunc)
        {
            this.Owner.Space.Destroy();
            this.FunctionCall();
        }
        if(this.ButtonType == ButtonType.Unpause)
        {
            var interruptSpace = this.GameSession.FindSpaceByName("InterruptSpace");
            if(interruptSpace != null)
            {
                interruptSpace.LevelSettings.LevelListener.UnpauseThisGame();
            }
        }
        if(this.ButtonType == ButtonType.ReturnableLevel)
        {
            this.Owner.Space.TimeSpace.TogglePause();
            this.Owner.Space.LevelSettings.LevelListener.IgnoreKey = true;
            this.Owner.Space.LevelSettings.LevelListener.IsThePauseLevel = false;
            var creditsSpace = this.GameSession.CreateNamedSpace("ReturnableSpace", Archetype.Find("Space"));
            creditsSpace.LoadLevel(this.LoadThisLevel);
            creditsSpace.LevelSettings.LayeredPause.Unlayer = this.Owner.Space;
        }
        
        if(this.ButtonType == ButtonType.DoNothing)
        {
            return;
        }
    }

    function OnMouseDown(event : ViewportMouseEvent)
    {
        this.Owner.Sprite.Color = this.Owner.Sprite.Color +
                                  Real4(0.0, 0.0, 0.0, 0.5 - this.Owner.Sprite.Color.W);
    }

    function OnMouseExit(event : ViewportMouseEvent)
    {
        // Become dullest to allow it to fade into the background
        this.Owner.Sprite.Color = this.Owner.Sprite.Color +
                                  Real4(0.0, 0.0, 0.0, 1.0 - this.Owner.Sprite.Color.W);
    }
    
}

