class ScrollReaction : ZilchComponent
{
    //Time delay so that the scroll can animate in
    var DelayTime:Real = 0.7;
    //The current time that increases
    var CurrentTime:Real = 0.0;
    //The ID that ScrollCompleteActions will take
    [Property]
    var IDNumber:Integer = 0;
    //The number of frames until the scroll fails
    [Property]
    var TimeLimit:Real = 2.5;
    //The number of frames that the player should beat for GOLD Time
    [Property]
    var GoldTime:Real = 2.2;
    //The amount of energy that this scroll requires to use sucessfully
    [Property]
    var IEnergyCost:Real = 20;
    //The amount of energy that is expended when failing
    [Property]
    var IFailCost:Real = 10;
    //Left and Right charge bars that scale down with time
    [Property]
    var LeftChargeBar:CogPath;
    [Property]
    var RightChargeBar:CogPath;
    //The charge bar's Y initial scale
    var ChargeBarYScale:Real = 0.0;
    //The particle effect to play upon completion of the scroll
    [Property]
    var SuccessParticle:Archetype;
    
    function Initialize(init : CogInitializer)
    {
        //First checks if the player has enough energy to cast the scroll. If not, it fails
        if(this.GameSession.FindSpaceByName("HUDSpace").LevelSettings.LevelData.RPlayerEnergy < this.IEnergyCost)
        {
            //Console.WriteLine("ScrollReaction.ScrollFail NOT ENOUGH ENERGY");
            this.GameSession.FindSpaceByName("HUDSpace").FindObjectByName("NotificationText").PlayerNotification.SetNotification(100, "Not Enough Energy");
            this.ScrollFail();
        }
        
        //Sets the initial player time at 0
        this.CurrentTime = 0;
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        this.ChargeBarYScale = this.LeftChargeBar.Cog.Transform.Scale.Y;
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        //Decreases the delay time before the actual timer starts
        if(this.DelayTime > 0.0)
        {
            this.DelayTime -= event.Dt;
        }
        //Increases the current time each frame and scales the charge bars to display it
        else
        {
            this.CurrentTime += event.Dt;
            var yScale:Real = this.ChargeBarYScale - ((this.CurrentTime / this.TimeLimit) * this.ChargeBarYScale);
            
            this.LeftChargeBar.Cog.Transform.Scale = Real3(this.LeftChargeBar.Cog.Transform.Scale.X, yScale, this.LeftChargeBar.Cog.Transform.Scale.Z);
            this.RightChargeBar.Cog.Transform.Scale = Real3(this.LeftChargeBar.Cog.Transform.Scale.X, yScale, this.LeftChargeBar.Cog.Transform.Scale.Z);
        }
        
        //If the player time is beyond the time limit, the scroll fails (took too long)
        if(this.CurrentTime > this.TimeLimit)
        {
            this.ScrollFail();
        }
    }
    
    //Function called by the ScrollPoint script when the last point is hit
    function ScrollActivate()
    {
        //Takes away from the player's energy to cast this ability
        this.GameSession.FindSpaceByName("HUDSpace").LevelSettings.LevelData.RPlayerEnergy -= this.IEnergyCost;
        
        //If the player didn't beat the gold time, scroll activates as normal
        if(this.CurrentTime > this.GoldTime)
        {
            this.Space.CreateAtPosition(this.SuccessParticle, Real3(0,0,0.5));
            this.Owner.ScrollCompleteActions.ScrollID(this.IDNumber, false);
        }
        //If the player's time is better than the gold time, the scroll is more powerful
        else
        {
            this.Space.CreateAtPosition(Archetype.Find("GoldScrollParticle"), Real3(0,0,0.5));
            this.Owner.ScrollCompleteActions.ScrollID(this.IDNumber, true);
        }
        //Destroys this space
        var seqDestroy = Action.Sequence(this.Owner.Actions);
        Action.Delay(seqDestroy, 2.0);
        Action.Call(seqDestroy, this.Space.Destroy);
    }
    
    //Function called when the player doesnt have enough energy to cast, or runs out of time
    function ScrollFail()
    {
        //if the player doesnt have enough energy, sets it to 0
        if(this.GameSession.FindSpaceByName("HUDSpace").LevelSettings.LevelData.RPlayerEnergy < this.IFailCost)
        {
            this.GameSession.FindSpaceByName("HUDSpace").LevelSettings.LevelData.RPlayerEnergy = 0;
        }
        //Otherwise subtracts from the total.
        else
        {
            this.GameSession.FindSpaceByName("HUDSpace").LevelSettings.LevelData.RPlayerEnergy -= this.IFailCost;
        }
        //Destroys this space
        this.Space.Destroy();
    }
}
