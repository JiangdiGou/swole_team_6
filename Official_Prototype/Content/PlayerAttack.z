/********************************************************************************
file    PlayerAttack.z
author  Mitchell Regan
par     Contact: mitchell.regan@digipen.edu
brief
    Basic player attack that shoots out in a straight line toward the mouse.
    This is probably not going to be used in the final game, but keep it anyways 
    just in case.

All content © 2015 DigiPen (USA) Corporation, all rights reserved.
*******************************************************************************/
class PlayerAttack : ZilchComponent
{
    //Determines if the left mouse is currently held down
    var BLClickDown:Boolean = false;
    //Duration that the left mouse is held down
    var ILClickDuration:Integer = 0;
    
    //Internal cooldown to prevent the player from attacking too fast
    var IAttackCD:Integer = 0;
    
    //Screen position of the mouse when the left mouse is clicked down
    var RMouseClickPos:Real2 = Real2(0,0);
    //Screen position of the mouse when the left mouse is released
    var RMouseReleasePos:Real2 = Real2(0,0);
    
    //Particle Emitter for slashing things n stuff
    var SlashParticle:Cog;
    
    //*******************************************************************************************************************************************
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Space, Events.LeftMouseDown, this.LeftMouseDown);
        Zero.Connect(this.Space, Events.LeftMouseUp, this.LeftMouseUp);
    }
    
    //*******************************************************************************************************************************************
    function OnLogicUpdate(event : UpdateEvent)
    {
        this.DecreaseCounters();
        
        //Increases the duration of how long the left mouse has been down
        if(this.BLClickDown)
        {
            this.ILClickDuration += 1;
        }
    }
    
    //*******************************************************************************************************************************************
    function LeftMouseDown(event : ViewportMouseEvent)
    {
        //Resets the duration timer for left click to 0 frames
        this.ILClickDuration = 0;
        //Captures the screen position of the mouse when left click is clicked down
        this.RMouseClickPos = Real2(event.ToWorldZPlane(0).X - this.Owner.Transform.Translation.X, event.ToWorldZPlane(0).Y - this.Owner.Transform.Translation.Y);
        
        this.BLClickDown = true;
    }
    
    //*******************************************************************************************************************************************
    function LeftMouseUp(event : ViewportMouseEvent)
    {
        if(this.IAttackCD == 0)
        {
            //Captures the screen position of the mouse when left click is released
            this.RMouseReleasePos = Real2(event.ToWorldZPlane(0).X - this.Owner.Transform.Translation.X, event.ToWorldZPlane(0).Y - this.Owner.Transform.Translation.Y);
            
            var rXDifference:Real = this.RMouseReleasePos.X - this.RMouseClickPos.X;
            var rYDifference:Real = this.RMouseReleasePos.Y - this.RMouseClickPos.Y;
            
            //If the drag of the mouse isn't long enough, it won't register as a slash, just a standard attack
            if(rXDifference <= 1 && rXDifference >= -2 && rYDifference <= 2 && rYDifference >= -2)
            {
                this.StandardAttack(this.RMouseReleasePos.X, this.RMouseReleasePos.Y);
            }
        }
        this.BLClickDown = false;
    }
    
    
    //*******************************************************************************************************************************************
    function StandardAttack(rXPos_:Real, rYPos_:Real)
    {
        //Finding the section of the screen that the player is attacking in (Cardinals and diagonals from the player)
        var rXDiff:Real = rXPos_;//
        var rYDiff:Real = rYPos_;//
        
        var rAngle:Real = Math.ATan2(rYDiff, rXDiff) * (180/Math.Pi);
        var rAtkPos:Real3 = Real3(0.0, 0.0, 0.0);
        var iAttackID:Integer = 10;
        
        var a3HitComboRight:Array[Integer] = new Array[Integer](2,12);
        var a3HitComboLeft:Array[Integer] = new Array[Integer](2,16);
        
        
        
        //Up attack
        if(rAngle >= 67.5 && rAngle <= 112.5)
        {
            //iAttackID += 0;
        }
        //Up-Right attack
        else if(rAngle > 22.5 && rAngle < 67.5)
        {
            iAttackID = 11;
            this.Owner.Sprite.FlipX = false;
        }
        //Right attack
        else if(rAngle <= 22.5 && rAngle >= 0.0 || rAngle >= -22.5 && rAngle <= 0.0)
        {
            iAttackID = 12;
            this.Owner.Sprite.FlipX = false;
        }
        //Down-Right attack
        else if(rAngle < -22.5 && rAngle > -67.5)
        {
            iAttackID = 13;
            this.Owner.Sprite.FlipX = false;
        }
        //Down attack
        else if(rAngle >= -112.5 && rAngle <= -67.5)
        {
            iAttackID = 14;
        }
        //Down-Left attack
        else if(rAngle < -112.5 && rAngle > -157.5)
        {
            iAttackID = 15;
            this.Owner.Sprite.FlipX = true;
        }
        //Left attack
        else if(rAngle >= 157.5 && rAngle <= 180.0 || rAngle <= -157.5 && rAngle >= -180.0)
        {
            iAttackID = 16;
            this.Owner.Sprite.FlipX = true;
        }
        //Down-Left attack
        else if(rAngle > 112.5 && rAngle < 157.5)
        {
            iAttackID = 17;
            this.Owner.Sprite.FlipX = true;
        }
        
        var segAttackStart:Real3 = this.Owner.Transform.Translation;
        var segAttackEnd:Real3 = Real3(Math.Cos(rAngle * (Math.Pi/180)) * 10 + this.Owner.Transform.Translation.X, Math.Sin(rAngle * (Math.Pi/180)) * 10 + this.Owner.Transform.Translation.Y, 0);
        var segAttackSegment = this.Space.PhysicsSpace.CastSegmentResults(segAttackStart, segAttackEnd, 10);
        
        var iDamage:Integer = 10;
        var bStun:Boolean = false;
        
        
        //If the player did 3 regular attacks in the same direction fast enough, it combos to a strong 3rd hit
        //Heavy Right Attack
        if(this.GameSession.FindSpaceByName("HUDSpace").LevelSettings.ComboManager.CheckForComboAttack(a3HitComboRight))
        {
            this.GameSession.FindSpaceByName("HUDSpace").LevelSettings.ComboManager.NewAttack(0,18);
            this.IAttackCD = 30;
            iDamage = 20;
            bStun = true;
        }
        //Heavy Left attack
        else if(this.GameSession.FindSpaceByName("HUDSpace").LevelSettings.ComboManager.CheckForComboAttack(a3HitComboLeft))
        {
            this.GameSession.FindSpaceByName("HUDSpace").LevelSettings.ComboManager.NewAttack(0,19);
            this.IAttackCD = 30;
            iDamage = 20;
            bStun = true;
        }
        //Standard Attack
        else
        {
            this.GameSession.FindSpaceByName("HUDSpace").LevelSettings.ComboManager.NewAttack(20,iAttackID);
            this.IAttackCD = 10;
        }
        
        
        for(var s:Integer = 0; s < segAttackSegment.Size(); ++s)
        {
            if(segAttackSegment.Front().ObjectHit.Name == "Enemy")
            {
                //var rXDist:Real = segAttackSegment.Front().ObjectHit.Transform.Translation.X - this.Owner.Transform.Translation.X;
                //var rYDist:Real = segAttackSegment.Front().ObjectHit.Transform.Translation.Y - this.Owner.Transform.Translation.Y;
                var rHypot:Real = Math.DistanceSq(this.Owner.Transform.Translation, segAttackSegment.Front().ObjectHit.Transform.Translation);
                if(rHypot <= 20)
                {
                    segAttackSegment.Front().ObjectHit.EnemyHitReaction.OnHit(iDamage,false, bStun, iAttackID);
                }
            }
            segAttackSegment.PopFront();
            --s;
        }
        
        this.SlashParticle = this.Space.CreateAtPosition(Archetype.Find("SlashEffect"), this.Owner.Transform.Translation + Real3(0,0,1));
        this.SlashParticle.RigidBody.Velocity = Real3(Math.Cos(rAngle * (Math.Pi/180)) * 40, Math.Sin(rAngle * (Math.Pi/180)) * 40, 0);
        //Play sound
        this.Space.FindObjectByName("BackgroundMusic").BackgroundMusic.SwordSound();
        //var seq1 = Action.Sequence(this.SlashParticle.Actions);
        
        //Action.Property(seq1, @this.SlashParticle.RigidBody.Velocity, Real3(Math.Cos(rAngle * (Math.Pi/180)) * 20, Math.Sin(rAngle * (Math.Pi/180)) * 20, 0), 0.2, Ease.Linear);
    }
    
    
    //*******************************************************************************************************************************************
    function DecreaseCounters()
    {
        //Decrements the light attack cooldown
        if(this.IAttackCD > 0)
        {
            this.IAttackCD -= 1;
        }
    }
}













