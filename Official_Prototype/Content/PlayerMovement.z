/********************************************************************************
file    PlayerMovement.z
author  Mitchell Regan
par     Contact: mitchell.regan@digipen.edu
brief
    Controls how the player does basic movements with WASD.

All content © 2015 DigiPen (USA) Corporation, all rights reserved.
*******************************************************************************/
class PlayerMovement : ZilchComponent
{
    //How fast the player can move
    [Property]
    var RSpeed:Real = 0.3;
    
    var LeftCollision:Boolean = false;
    var RightCollision:Boolean = false;
    
    
    //Boolean that prevents the player from moving at certain times (like when dashing)
    var BCanMove:Boolean = true;
    
    //Collider for the CheckCollisions collider to reference
    var Collider:Collider = null;
    
    //*******************************************************************************************************************************************
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    //*******************************************************************************************************************************************
    function OnLogicUpdate(event : UpdateEvent)
    {
        if(this.BCanMove)
        {
            this.LeftCollision = this.CheckCollision(-Real3.XAxis);
            this.RightCollision = this.CheckCollision(Real3.XAxis);
            
            //Move left when A or Left Arrow are pressed
            if(Zero.Keyboard.KeyIsDown(Keys.A) || Zero.Keyboard.KeyIsDown(Keys.Left))
            {
                if(!this.LeftCollision)
                {
                    this.Owner.RigidBody.Velocity = Real3(-this.RSpeed, this.Owner.RigidBody.Velocity.Y, 0);
                    this.Owner.Sprite.FlipX = true;
                }
            }
            
            //Move right when D or Right Arrow are pressed
            else if(Zero.Keyboard.KeyIsDown(Keys.D) || Zero.Keyboard.KeyIsDown(Keys.Right))
            {
                if(!this.RightCollision)
                {
                    this.Owner.RigidBody.Velocity = Real3(this.RSpeed, this.Owner.RigidBody.Velocity.Y, 0);
                    this.Owner.Sprite.FlipX = false;
                }
            }
            
            //safety checks to stop the player from continuously moving only if they arent in the middle of slashing or dashing
            else if(this.Owner.PlayerSlashAttack != null && this.Owner.PlayerSlashAttack.ISlashStop == 0)
            {
                this.Owner.RigidBody.Velocity = Real3(0, this.Owner.RigidBody.Velocity.Y, 0);
            }
            else if(this.Owner.PlayerDash != null && this.Owner.PlayerDash.IDashStop == 0)
            {
                this.Owner.RigidBody.Velocity = Real3(0, this.Owner.RigidBody.Velocity.Y, 0);
            }
            
            
            
            if(Zero.Keyboard.KeyIsDown(Keys.A) || Zero.Keyboard.KeyIsDown(Keys.D))
            {
                //if slashing
                if(this.Owner.Sprite.SpriteSource == SpriteSource.CharacterSlash_4)
                {
                    //stops on last frame of slash
                    if(this.Owner.Sprite.CurrentFrame == 3)
                    {
                        this.Owner.Sprite.SpriteSource = SpriteSource.CharacterRun_8;
                        this.Owner.Sprite.AnimationActive = true;
                    }
                }
                
                //if not slashing
                else if(this.Owner.Sprite.SpriteSource != SpriteSource.CharacterRun_8)
                {
                    this.Owner.Sprite.SpriteSource = SpriteSource.CharacterRun_8;
                    this.Owner.Sprite.AnimationActive = true;
                }
            }
            
            if(Zero.Keyboard.KeyIsUp(Keys.A) && Zero.Keyboard.KeyIsUp(Keys.D))
            {
                //if slashing
                if(this.Owner.Sprite.SpriteSource == SpriteSource.CharacterSlash_4)
                {
                    //stops on last frame of slash
                    if(this.Owner.Sprite.CurrentFrame == 3)
                    {
                        this.Owner.Sprite.SpriteSource = SpriteSource.Character_4;
                        this.Owner.Sprite.AnimationActive = true;
                    }
                }
                //if not slashing
                else
                {
                    this.Owner.Sprite.SpriteSource = SpriteSource.Character_4;
                    this.Owner.Sprite.AnimationActive = true;
                }
            }
            
            if(this.LeftCollision || this.RightCollision && this.Owner.RigidBody.Velocity.Y < 0)
            {
                this.Owner.RigidBody.Velocity = Real3(this.Owner.RigidBody.Velocity.X, this.Owner.RigidBody.Velocity.Y * 0.8, this.Owner.RigidBody.Velocity.Z);
            }
        }
    }
    
    //Casts a ray and checks if the object hit is close enough to the player
    function CheckCollision(direction_:Real3):Boolean
    {
        var ray = Ray();
        ray.Start = this.Owner.Transform.Translation;
        ray.Direction = direction_;
        var filter = CastFilter();
        filter.IgnoreDynamic = true;
        var results = this.Space.PhysicsSpace.CastRayFirstFiltered(ray, filter);
        var difference:Real = 0.0;
        
        if(results.ObjectHit == null)
        {
            return false;
        }
        
        //If checking right
        if(direction_.X > 0)
        {
            difference = Math.Abs(results.WorldPosition.X - this.Owner.Transform.Translation.X);
        }
        //If checking left
        else
        {
            difference = Math.Abs(results.WorldPosition.X - this.Owner.Transform.Translation.X);
        }
        
        if(difference <= 0.8)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}




