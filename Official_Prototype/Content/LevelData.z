/********************************************************************************
file    LevelData.z
author  Mitchell Regan
par     Contact: mitchell.regan@digipen.edu
brief
    Tracks data for the current gameplay level, like player HP, energy, combo, time, etc

All content © 2015 DigiPen (USA) Corporation, all rights reserved.
*******************************************************************************/
class LevelData : ZilchComponent
{
    //Player HP 0-100 but will change the max in GameData
   // var RPlayerHealth:Real;
    //Player energy 0-100
    var RPlayerEnergy:Real;
    //Number of frames until energy is decreased by 1
    var IEnergyCountDown:Integer;
    //Number of frames until the level timer is decreased by 1
    var ITimeCountDown:Integer = 0;
    //Highest attack combo for this level
    var IBestCombo:Integer;
    //Amount of time for the player to complete this level
    [Property]
    var ILevelTimer:Integer = 100;
    
    var GameOver : Boolean = false;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        //this.RPlayerHealth = 100;
        this.RPlayerEnergy = 0;
        this.IEnergyCountDown = 0;
        this.IBestCombo = 0;
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        //Makes the level timer count down until it hits 0. goes down by 1 every 60 frames
        if(this.ILevelTimer > 0)
        {
            ++this.ITimeCountDown;
            
            if(this.ITimeCountDown % 60 == 0)
            {
                --this.ILevelTimer;
            }
        }
        //When the timer hits 0, end the level
        else if(!this.GameOver && this.ILevelTimer <= 0)
        {
            this.GameOver = true;
            //this.GameSession.FindSpaceByName("Main").FindObjectByName("LevelManager").LevelManager.GameOver = true;
        }
        
        //Decreases the player's energy by 1 every 40 frames
        if(this.RPlayerEnergy > 0)
        {
            ++this.IEnergyCountDown;
            
            if(this.IEnergyCountDown % 40 == 0)
            {
                this.RPlayerEnergy -= 1;
                this.IEnergyCountDown = 0;
            }
        }
        
        //DEVELOPER TOOLS TO TEST HEALTH AND ENERGY MECHANICSVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
    }
    
    //Called when a combo ends. Checks the new combo streak against the best and finds the highest
    function CheckBestCombo(iNewCombo_:Integer)
    {
        if(iNewCombo_ > this.IBestCombo)
        {
            this.IBestCombo = iNewCombo_;
        }
    }
    
    //Called whenever the player attacks or takes damage. Increases energy up to a max of 100
    function AddEnergy(iEnergyValue_:Integer)
    {
        var energyToAdd:Integer = (iEnergyValue_ / 10) + 1;
        
        if(energyToAdd + this.RPlayerEnergy > 100)
        {
            this.RPlayerEnergy = 100;
        }
        else
        {
            this.RPlayerEnergy += energyToAdd;
        }
    }
}
