/********************************************************************************
file    EnemyHitReaction.z
author  Mitchell Regan
par     Contact: mitchell.regan@digipen.edu
brief
    How an enemy responds to a given attack, how much damage they take, and what 
    sound to play when hit.

All content © 2015 DigiPen (USA) Corporation, all rights reserved.
*******************************************************************************/
class EnemyHitReaction : ZilchComponent
{
    //Enemy's Health (Damage they can take until they die)
    [Property]
    var IHealth:Integer = 100;
    
    //Enemy's Overkill Health (Damage they can take until they can no longer be hit)
    [Property]
    var IOverkillHealth:Integer = 150;
    
    [Property]
    var IDespawnTime: Integer = 200;
    
    //The number of frames that this enemy is stunned
    [Property]
    var IStunCD:Integer = 60;
    
    //The counter to see how long the enemy has until they're not stunned
    var IStunCounter:Integer = 0;
    
    var RegSize:Real3 = Real3(0,0,0);
    var HitSize:Real3 = Real3(0,0,0);
    
    var Invulnerable:Boolean = false;
    
    //Sound Manager object
    var SoundPlayer : Cog;
    
    //Tutorial Level exception
    [Property]
    var Box : Boolean;
    
    function Initialize(init : CogInitializer)
    {
        this.RegSize = this.Owner.Transform.Scale;
        this.HitSize = Real3(this.Owner.Transform.Scale.X * 0.8, this.Owner.Transform.Scale.Y, 1);
            
        //Find the music manager
        this.SoundPlayer = this.Space.FindObjectByName("BackgroundMusic");
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
    }
    
    
    function OnLogicUpdate(event: UpdateEvent)
    {
        //If the player has been juggling the enemy corpse too long, destroys this enemy
        if(this.IOverkillHealth <= 0)
        {
            //subtract 1 from amount of enemies alive
            this.Space.FindObjectByName("LevelManager").EnemyCounter.EnemiesAlive -= 1;
            Console.WriteLine(this.Space.FindObjectByName("LevelManager").EnemyCounter.EnemiesAlive);
            
            if(this.Box)
            {
                this.Space.FindObjectByName("Trip4").TutorialTripScript.CreateScript(Trip.Trip_4);
                
                this.Owner.Destroy();
            }
            else
            {
                this.Owner.Destroy();
            }
            
        }
        
        //Starts despawning the enemy once their hp is below 0
        if(this.IHealth <= 0)
        {
            this.IDespawnTime -= 1;
        }
        
        //Destroys this enemy if their hp is below 0 too long
        if(this.IDespawnTime <= 0)
        {
            //subtract 1 from amount of enemies alive
            this.Space.FindObjectByName("LevelManager").EnemyCounter.EnemiesAlive -= 1;
            Console.WriteLine(this.Space.FindObjectByName("LevelManager").EnemyCounter.EnemiesAlive);
            this.Owner.Destroy();
        }
    }
    
    //Takes the amount of damage this enemy takes, if the attack stuns, and if the attack knocks up.
    function OnHit(iDamageTaken_:Integer, bIsStunned_:Boolean, bKnockedUp_:Boolean)
    {
        if(!this.Invulnerable)
        {
            //Reduces the object's hp by the damage taken
            this.IHealth -= iDamageTaken_;
            this.IOverkillHealth -= iDamageTaken_;
            
            //Knocks this object up into the air if the attack knocks up
            if(bKnockedUp_)
            {
                this.Owner.RigidBody.Velocity += Real3(0.0, 10.0, 0.0);
            }
            
            //Increases the player's combo by calling the AttackHit function in the ComboManager
            this.GameSession.FindSpaceByName("HUDSpace").LevelSettings.ComboManager.AttackHit();
            
            //Play hit sound effect
            this.SoundPlayer.BackgroundMusic.PlaySword();
            
            
            var seqHit = Action.Sequence(this.Owner.Actions);
            //Turn red and squish slightly
            Action.Property(seqHit, @this.Owner.Sprite.Color, Real4(1, 0, 0, 1), 0.02, Ease.Linear);
            Action.Property(seqHit, @this.Owner.Transform.Scale, this.HitSize, 0.02, Ease.Linear);
            
            Action.Delay(seqHit, 0.05);
            //Return to regular look
            Action.Property(seqHit, @this.Owner.Sprite.Color, Real4(1, 1, 1, 1), 0.05, Ease.Linear);
            Action.Property(seqHit, @this.Owner.Transform.Scale, this.RegSize, 0.05, Ease.Linear);
        }
    }
}
