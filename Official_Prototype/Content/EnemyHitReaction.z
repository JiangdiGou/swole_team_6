class EnemyHitReaction : ZilchComponent
{
    //Enemy's Health (Damage they can take until they die)
    [Property]
    var IHealth:Integer = 100;
    
    //Enemy's Overkill Health (Damage they can take until they can no longer be hit)
    [Property]
    var IOverkillHealth:Integer = 150;
    
    [Property]
    var IDespawnTime: Integer = 200;
    
    //The number of frames that this enemy is stunned
    [Property]
    var IStunCD:Integer = 60;
    
    //The counter to see how long the enemy has until they're not stunned
    var IStunCounter:Integer = 0;
    
    
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    
    function OnLogicUpdate(event: UpdateEvent)
    {
        //this.Owner.SpriteText.Text = "`this.IHealth`";
        
        //If the player has been juggling the enemy corpse too long, destroys this enemy
        if(this.IOverkillHealth <= 0)
        {
            this.Owner.Destroy();
        }
        
        //Starts despawning the enemy once their hp is below 0
        if(this.IHealth <= 0)
        {
            this.IDespawnTime -= 1;
        }
        
        //Destroys this enemy if their hp is below 0 too long
        if(this.IDespawnTime <= 0)
        {
            this.Owner.Destroy();
        }
    }
    
    //Takes the amount of damage this enemy takes, if the attack stuns, and if the attack knocks up.
    function OnHit(iDamageTaken_:Integer, bIsStunned_:Boolean, bKnockedUp_:Boolean)
    {
        //Reduces the object's hp by the damage taken
        this.IHealth -= iDamageTaken_;
        this.IOverkillHealth -= iDamageTaken_;
        
        //Knocks this object up into the air if the attack knocks up
        if(bKnockedUp_)
        {
            this.Owner.RigidBody.Velocity += Real3(0.0, 10.0, 0.0);
        }
        
        //Increases the player's combo by calling the AttackHit function in the ComboManager
        this.GameSession.FindSpaceByName("HUDSpace").LevelSettings.ComboManager.AttackHit();
    }
}
